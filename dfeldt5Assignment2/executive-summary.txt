Assignment name: Assignment 2 - Shapes
TCSS 305 A: Programming Practicum, Autumn 2023

Name: Dustin Feldt
UWNetID: DFeldt5


Assignment Overview:

Shapes involves writing an abstract class to define a type of object, then various
child classes which inherit from that class and also contain their own methods
and attributes.  There is a factory class that calls the individual shape classes
to utilize their constructors, and finally a test class that runs the system and checks
the results.  Conceptually, it explores the use of inheritance, compartmentalization,
grouping of similar classes, documentation, and best practices for coding.


Technical Impression:

I started with the AbstractShape class, which was relatively straightforward
despite Abstract classes being a new concept for me.  I used the equals() and
compareTo() methods from Assignment 1 as a springboard for this project’s
versions, which allowed me to refine them and gain a deeper understanding
of how they work.  The examples for hashCode() given in class also clarified
that method’s purpose, which was a question mark for me last week.  The four
Shape classes were simple to sketch out, but involved a lot of detail checking
to ensure they all had the right levels of inheritance and privacy.  I modified 
hashCode() for each shape’s specific attributes so that two shapes with the
same area but different measurements would have different codes.  ShapeFactory
was similar to the Shapes in simplicity since the only four methods were
just constructor calls to the respective shapes, but it was good practice in 
proper naming conventions and formatting.  ShapeTester was the trickiest to
write, as not all of my initial ideas meshed together.  I thought of creating a
random double generator to draw parameter values from, which while fun,
would mean the printed output could never be duplicated and area values
couldn’t be hand-checked without using the debugger.  I also over-complicated
the Sort function, since I spent so long last week figuring out how to do it 
without API calls and thought I might as well get some more use out of the
code - not to mention the compareTo() method I wrote for this assignment.
I also wrote a printer() method to avoid duplicate code when printing the
sorted and unsorted Arrays.  I did have to iron out a lot of wrinkles with static
versus non-static methods and fields, which remains a weak spot for me.
As a concept I feel like I understand the difference, but when I’m writing I
often get ahead of myself and have to check the error marks to see where 
I went wrong.  I also felt like I relied on PMD and CheckStyle to refine my
inheritance pipeline and compartmentalization, which to be fair is their 
purpose, but it shows me I need more practice to fully wrap my head around
everything involved in these new concepts.  JavaDoc is another question
mark, as I’m never quite sure if I’m doing it correctly.  Even with the style
guide, I am fuzzy on how in-depth my documentation should be.


Unresolved problems in my submission:

None that I’m aware of!


Citations and Collaborations:

None


Extra Credit:

I successfully eliminated all warnings from SpotBugs, PMD, and CheckStyle aside from
Magic Number warnings regarding constructor calls in ShapeTest.


Questions:

None


